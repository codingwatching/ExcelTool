/*
 * auto generated by tools(注意:千万不要手动修改本文件)
 * battleScene
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

[Serializable]
public partial class battleScene : IBinarySerializable
{
	/// <summary>
	/// 序号
	/// </summary>
	public int Id { get; set; }
	/// <summary>
	/// 名字
	/// </summary>
	public string Name { get; set; }
	/// <summary>
	/// 场景Id
	/// </summary>
	public string SceneId { get; set; }
	/// <summary>
	/// 背景音乐Id
	/// </summary>
	public int BackMusicId { get; set; }
	/// <summary>
	/// 出生点vector列表
	/// </summary>
	public List<List<float>> EnemyBornPoints { get; set; }
	/// <summary>
	/// 出生点对应的小怪id
	/// </summary>
	public List<int> EnemyIds { get; set; }
	/// <summary>
	/// 波次Id
	/// </summary>
	public List<int> WavesId { get; set; }

	public void DeSerialize(BinaryReader reader)
	{
		Id = reader.ReadInt32();
		Name = reader.ReadString();
		SceneId = reader.ReadString();
		BackMusicId = reader.ReadInt32();
		var EnemyBornPointsCount = reader.ReadInt32();
		if (EnemyBornPointsCount > 0)
		{
			EnemyBornPoints = new List<List<float>>();
			for (int i = 0; i < EnemyBornPointsCount; i++)
			{
				var tempList = new List<float>();
				var tempListCount = reader.ReadInt32();
				for (int j = 0; j < tempListCount; j++)
				{
					tempList.Add(reader.ReadSingle());
				}
				EnemyBornPoints.Add(tempList);
			}
		}
		else
		{
			EnemyBornPoints = null;
		}
		var EnemyIdsCount = reader.ReadInt32();
		if (EnemyIdsCount > 0)
		{
			EnemyIds = new List<int>();
			for (int i = 0; i < EnemyIdsCount; i++)
			{
				EnemyIds.Add(reader.ReadInt32());
			}
		}
		else
		{
			EnemyIds = null;
		}
		var WavesIdCount = reader.ReadInt32();
		if (WavesIdCount > 0)
		{
			WavesId = new List<int>();
			for (int i = 0; i < WavesIdCount; i++)
			{
				WavesId.Add(reader.ReadInt32());
			}
		}
		else
		{
			WavesId = null;
		}
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(Id);
		writer.Write(Name);
		writer.Write(SceneId);
		writer.Write(BackMusicId);
		if (EnemyBornPoints == null || EnemyBornPoints.Count == 0)
		{
			writer.Write(0);
		}
		else
		{
			writer.Write(EnemyBornPoints.Count);
			for (int i = 0; i < EnemyBornPoints.Count; i++)
			{
				writer.Write(EnemyBornPoints[i].Count);
				for (int j = 0; j < EnemyBornPoints[i].Count; j++)
				{
					writer.Write(EnemyBornPoints[i][j]);
				}
			}
		}
		if (EnemyIds == null || EnemyIds.Count == 0)
		{
			writer.Write(0);
		}
		else
		{
			writer.Write(EnemyIds.Count);
			for (int i = 0; i < EnemyIds.Count; i++)
			{
				writer.Write(EnemyIds[i]);
			}
		}
		if (WavesId == null || WavesId.Count == 0)
		{
			writer.Write(0);
		}
		else
		{
			writer.Write(WavesId.Count);
			for (int i = 0; i < WavesId.Count; i++)
			{
				writer.Write(WavesId[i]);
			}
		}
	}
}

[Serializable]
public partial class battleSceneConfig : IBinarySerializable
{
	public List<battleScene> battleSceneInfos = new List<battleScene>();
	public void DeSerialize(BinaryReader reader)
	{
		int count = reader.ReadInt32();
		for (int i = 0;i < count; i++)
		{
			battleScene tempData = new battleScene();
			tempData.DeSerialize(reader);
			battleSceneInfos.Add(tempData);
		}
	}

	public void Serialize(BinaryWriter writer)
	{
		writer.Write(battleSceneInfos.Count);
		for (int i = 0; i < battleSceneInfos.Count; i++)
		{
			battleSceneInfos[i].Serialize(writer);
		}
	}

	public battleScene QueryById(int id)
	{
		var datas = from d in battleSceneInfos
					where d.Id == id
					select d;
		return datas.FirstOrDefault();
	}
}
